Making your own "Top Down Sprite Maker" sprite style consists of drawing assets
and a little bit of programming to define the style's assembly rules.

Sprite styles are uploaded to TDSM as ZIP files, either with the ".zip" or ".tdsm"
file extension. These ZIP files must contain at their root a "manifest.tds" (all
lowercase) file. This manifest file defines the sprite style. Any other contents
of the ZIP file, such as base image assets or resources you wish to provide to
users seeking to deconstruct and edit the sprite style, are optional. Keep in mind
that smaller ZIP files will be parsed more efficiently by TDSM.

ZIP structure:

    "my_sprite_style.zip" or "my_sprite_style.tdsm"
     |
     |--> "manifest.tds"
     |--> *any other files or directories*

manifest.tds

    The "manifest.tds" file must be written in DeltaScript with the TDSM scripting
    API. DeltaScript is a scripting language designed by the same developer as
    TDSM, which serves as a base to design domain-specific languages. In this case,
    the DeltaScript + the TDSM scripting API gives you all the tools you need to
    define complex behaviours for "Top Down Sprite Maker" sprite styles.

    The TDSM scripting API and the DeltaScript language reference are linked below.

    Note:
    As of the release of v1.2.0, the TDSM scripting API has not yet been properly
    documented. This is an urgent priority of the developer and will be addressed
    as soon as possible. More comprehensive guides for sprite style creation will
    eventually be added to the scripting API GitHub repository.

    Structure

        DeltaScript files consist of a nameless "header" function followed by
        an optional series of named "helper" functions. The header function of
        "manifest.tds" must have the signature "(-> style)", meaning it takes no
        parameters and returns an object of type "style". This returned object is
        the sprite style defined by the script.

    Metadata functions

        "manifest.tds" is parsed by TDSM for the presence of several special
        metadata functions that define specific properties of the sprite style.
        These are all optional -- if they are not explicitly declared, TDSM will
        assign default values to these properties of the sprite style when it is
        initialized in the program.

        These metadata functions follow, listed as their function name and type
        signature enclosed in quotation marks. All names and strings are lowercase.

        "name(-> string)"

            Returns a string that will be used as the list name in the sprite
            style dropdown on the Customization screen to represent this sprite
            style. This is unrelated to the sprite style's ID, which is saved
            as part of the metadata JSON export.

        "info(-> string)"

            Returns a string that will be displayed as a tooltip when users hover
            over the "Help" icon next to the sprite style dropdown on the
            Customization screen while this sprite style is selected.

        "preview_scale(-> int)"

            Returns a (positive) integer that defines the scale factor for sprites
            of this style when displayed in the animation preview window. As a
            rule of thumb, this value should be 1 for 32- or 64-bit sprites, 2 for
            16-bit sprites, and 3 for 8-bit sprites.

            By default, the scale factor is 2.

        "settings(-> string[])"

            Returns a string array of settings codes representing the settings
            included in the sprite style.

            By default, sprite styles have no settings.

            Valid settings codes are:
            > "quantize_gba" - A flag that, when checked, quantizes the colors
                                            of the sprite sheet to colors supported by the
                                            Game Boy Advance
            > "warn_rom_15_cols" - A flag that, when checked, warns the user if
                                                    the sprite sheet contains more than 15 unique
                                                    colors, a limitation for sprites on the Game
                                                    Boy Advance

Tips

    1)

    It is *highly* recommended that you look at examples of sprite styles before
    attempting to define your own. You can find a collection of sprite styles,
    many of which are freely available, linked in the menu at:
    > "Help" -> "Get more sprite styles"

    You can download these sprite styles, extract the contents of the ZIP files,
    and...
    > read through the code in "manifest.tds"
    > see what other assets and resources are packaged as part of the sprite style

    It is especially recommended to look at the Pokemon Gen III and IV styles, as
    these demonstrate many of the important techniques and span a large chunk of
    the scripting API.

    2)

    The developer's preferred way of working on art for sprite styles is to make
    a "Stipple Effect" project for each asset choice layer. Each project gets an
    associated export script that exports each frame as a separate image asset,
    and all the valid selection IDs as a CSV file. This way, sprite styles can be
    updated iteratively without having to make any code changes to "manifest.tds",
    which simply parses the CSV file and reads in the corresponding image assets.
    The Pokemon sprite styles cited in tip 1) utilize this technique.
